//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AsyncCalculatorClient.AsyncCalculatorService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AsyncCalculatorService.IAsyncCalculatorService", CallbackContract=typeof(AsyncCalculatorClient.AsyncCalculatorService.IAsyncCalculatorServiceCallback))]
    public interface IAsyncCalculatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsyncCalculatorService/Print", ReplyAction="http://tempuri.org/IAsyncCalculatorService/PrintResponse")]
        void Print(string s1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsyncCalculatorService/Print", ReplyAction="http://tempuri.org/IAsyncCalculatorService/PrintResponse")]
        System.Threading.Tasks.Task PrintAsync(string s1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncCalculatorService/Print2")]
        void Print2(string s2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncCalculatorService/Print2")]
        System.Threading.Tasks.Task Print2Async(string s2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncCalculatorService/Factorial")]
        void Factorial(int n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncCalculatorService/Factorial")]
        System.Threading.Tasks.Task FactorialAsync(int n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncCalculatorService/WaitForSeconds")]
        void WaitForSeconds(int sec);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncCalculatorService/WaitForSeconds")]
        System.Threading.Tasks.Task WaitForSecondsAsync(int sec);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAsyncCalculatorServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncCalculatorService/FactorialCallback")]
        void FactorialCallback(int result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncCalculatorService/WaitForSecondsCallback")]
        void WaitForSecondsCallback(string result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAsyncCalculatorServiceChannel : AsyncCalculatorClient.AsyncCalculatorService.IAsyncCalculatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AsyncCalculatorServiceClient : System.ServiceModel.DuplexClientBase<AsyncCalculatorClient.AsyncCalculatorService.IAsyncCalculatorService>, AsyncCalculatorClient.AsyncCalculatorService.IAsyncCalculatorService {
        
        public AsyncCalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AsyncCalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AsyncCalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AsyncCalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AsyncCalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Print(string s1) {
            base.Channel.Print(s1);
        }
        
        public System.Threading.Tasks.Task PrintAsync(string s1) {
            return base.Channel.PrintAsync(s1);
        }
        
        public void Print2(string s2) {
            base.Channel.Print2(s2);
        }
        
        public System.Threading.Tasks.Task Print2Async(string s2) {
            return base.Channel.Print2Async(s2);
        }
        
        public void Factorial(int n) {
            base.Channel.Factorial(n);
        }
        
        public System.Threading.Tasks.Task FactorialAsync(int n) {
            return base.Channel.FactorialAsync(n);
        }
        
        public void WaitForSeconds(int sec) {
            base.Channel.WaitForSeconds(sec);
        }
        
        public System.Threading.Tasks.Task WaitForSecondsAsync(int sec) {
            return base.Channel.WaitForSecondsAsync(sec);
        }
    }
}
